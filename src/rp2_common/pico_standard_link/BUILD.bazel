load("//bazel:defs.bzl", "compatible_with_rp2")
load("//bazel/util:sdk_define.bzl", "pico_sdk_define")
load("//src/common/pico_binary_info:binary_info.bzl", "custom_pico_binary_info")

package(default_visibility = ["//visibility:public"])

# This is exposed so that custom_pico_binary_info targets can find the required
# source files.
filegroup(
    name = "binary_info_srcs",
    srcs = ["binary_info.c"],
)

# PICO_BUILD_DEFINE: PICO_CXX_ENABLE_EXCEPTIONS, value of CMake var PICO_CXX_ENABLE_EXCEPTIONS, type=string, default=0, group=pico_cxx_options
pico_sdk_define(
    name = "PICO_CXX_ENABLE_EXCEPTIONS",
    define_name = "PICO_CXX_ENABLE_EXCEPTIONS",
    from_flag = "//bazel/config:PICO_CXX_ENABLE_EXCEPTIONS",
)

# PICO_BUILD_DEFINE: PICO_CMAKE_BUILD_TYPE, The type of build (e.g. Debug or Release) to embed in binary info, type=string, default=pico, group=build
pico_sdk_define(
    name = "PICO_BAZEL_BUILD_TYPE",
    # WARNING: The actual define is named after CMake, so that define
    # is reused for compatibility.
    define_name = "PICO_CMAKE_BUILD_TYPE",
    from_flag = "//bazel/config:PICO_BAZEL_BUILD_TYPE",
)

# With custom_pico_binary_info, it's possible to set binary info globally or
# on a per-binary basis.
#
# Setting globally:
#   * Set --@pico-sdk//bazel/config:PICO_DEFAULT_BINARY_INFO to point to your
#     custom custom_pico_binary_info.
#
# Setting per-binary:
#   * Set --@pico-sdk//bazel/config:PICO_DEFAULT_BINARY_INFO=@pico-sdk//bazel:empty_cc_lib
#   * Copy this cc_library, and manually set the values as you wish.
#   * Add custom_pico_binary_info to each cc_binary individually.
custom_pico_binary_info(
    name = "default_binary_info",
    program_description = None,
    program_name = None,
    program_url = None,
    program_version_string = None,
)

# It's possible to set linker scripts globally or on a per-binary basis.
#
# Setting globally:
#   * Set --@pico-sdk//bazel/config:PICO_DEFAULT_LINKER_SCRIPT to point to your
#     desired linker script.
#
# Setting per-binary:
#   * Set --@pico-sdk//bazel/config:PICO_DEFAULT_LINKER_SCRIPT=@pico-sdk//bazel:empty_cc_lib
#   * Manually add your desired linker script to each cc_binary.
cc_library(
    name = "default_linker_script",
    linkopts = ["-T$(location memmap_default.ld)"],
    deps = ["memmap_default.ld"],
)

# PICO_BUILD_DEFINE: PICO_USE_BLOCKED_RAM, whether this is a 'blocked_ram' build, type=bool, default=0, but dependent on CMake options, group=pico_standard_link
cc_library(
    name = "blocked_ram_linker_script",
    defines = ["PICO_USE_BLOCKED_RAM=1"],
    linkopts = ["-T$(location memmap_blocked_ram.ld)"],
    deps = ["memmap_blocked_ram.ld"],
)

# PICO_BUILD_DEFINE: PICO_COPY_TO_RAM, whether this is a 'copy_to_ram' build, type=bool, default=0, but dependent on CMake options, group=pico_standard_link
cc_library(
    name = "copy_to_ram_linker_script",
    defines = ["PICO_COPY_TO_RAM=1"],
    linkopts = ["-T$(location memmap_copy_to_ram.ld)"],
    deps = ["memmap_copy_to_ram.ld"],
)

# PICO_BUILD_DEFINE: PICO_NO_FLASH, whether this is a 'no_flash' build, type=bool, default=0, but dependent on CMake options, group=pico_standard_link
cc_library(
    name = "no_flash_linker_script",
    defines = ["PICO_NO_FLASH=1"],
    linkopts = ["-T$(location memmap_no_flash.ld)"],
    deps = ["memmap_no_flash.ld"],
)

cc_library(
    name = "pico_standard_link",
    srcs = [
        "crt0.S",
        "new_delete.cpp",
    ],
    target_compatible_with = compatible_with_rp2(),
    deps = [
        ":PICO_CXX_ENABLE_EXCEPTIONS",
        "//bazel/config:PICO_DEFAULT_BINARY_INFO",
        "//bazel/config:PICO_DEFAULT_LINKER_SCRIPT",
        "//src/common/pico_base:pico_base_interface",
        "//src/rp2_common/cmsis:cmsis_core",
        "//src/rp2_common/pico_bootrom",
        "//src/rp2_common/pico_platform",
        "//src/rp2_common/pico_platform:hardware_regs",
    ],
)
